# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
    workflow_dispatch: # Allow running the workflow manually from the GitHub UI
    push:
        branches:
            - 'main'       # Run the workflow when pushing to the main branch
    pull_request:
        branches:
            - '*'          # Run the workflow for all pull requests
    release:
        types:
            - published    # Run the workflow when a new GitHub release is published

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true
    NuGetDirectory: ${{ github.workspace }}/nuget
    Branch: ${{ github.head_ref }}

defaults:
    run:
        shell: pwsh

jobs:
    run_test:
        runs-on: ubuntu-latest
        steps:
            -   uses: actions/checkout@v3
            -   name: Setup .NET
                uses: actions/setup-dotnet@v4
            -   name: Run tests
                run: dotnet test --configuration Release
    
    version_update:
        runs-on: ubuntu-latest
        outputs:
            outcome: ${{ steps.version_update.outputs.outcome }}
        steps:
            -   uses: actions/checkout@v3
            -   id: version_update
                uses: ./.github/actions/version-update
                with:
                    username: ${{ github.actor }}
                    branch: ${{ env.Branch }}
                    github-token: ${{ secrets.GITHUB_TOKEN }}
                    
    version_update_output:
        runs-on: ubuntu-latest
        needs: version_update
        steps:
            - name: Echo
              run: echo $"${{ needs.version_update.outputs.outcome }}"
    
    create_nuget:
        runs-on: ubuntu-latest
        needs: [ version_update ]
        if: ${{ needs.version_update.outputs.outcome == 'success' }}
        steps:
            -   uses: actions/checkout@v3
            -   uses: ./.github/actions/create-nuget
                with:
                    NuGetDirectory: ${{ env.NuGetDirectory }}
    
    validate_nuget:
        runs-on: ubuntu-latest
        needs: [ create_nuget ]
        steps:
            -   uses: actions/checkout@v3
            -   uses: ./.github/actions/validate-nuget
                with:
                    NuGetDirectory: ${{ env.NuGetDirectory }}
    
    deploy:
        # Publish only when creating a GitHub Release
        # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
        # You can update this logic if you want to manage releases differently
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        needs: [ validate_nuget, run_test ]
        steps:
            # Download the NuGet package created in the previous job
            -   uses: actions/download-artifact@v4
                with:
                    name: nuget
                    path: ${{ env.NuGetDirectory }}
            
            # Install the .NET SDK indicated in the global.json file
            -   name: Setup .NET Core
                uses: actions/setup-dotnet@v4
            
            # Publish all NuGet packages to NuGet.org
            # Use --skip-duplicate to prevent errors if a package with the same version already exists.
            # If you retry a failed workflow, already published packages will be skipped without error.
            -   name: Publish NuGet package
                run: |
                    foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
                        dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
                    }